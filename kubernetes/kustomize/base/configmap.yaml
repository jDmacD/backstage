apiVersion: v1
data:
  app-config.production.yaml: |-
    app:
      # Should be the same as backend.baseUrl when using the `app-backend` plugin.
      baseUrl: https://backstage.jtec.xyz:443
    backend:
      # Note that the baseUrl should be the URL that the browser and other clients
      # should use when communicating with the backend, i.e. it needs to be
      # reachable not just from within the backend host, but from all of your
      # callers. When its value is "http://localhost:7007", it's strictly private
      # and can't be reached by others.
      baseUrl: https://backstage.jtec.xyz:443
      # The listener can also be expressed as a single <host>:<port> string. In this case we bind to
      # all interfaces, the most permissive setting. The right value depends on your specific deployment.
      listen: ':7007'
      cors:
        origin: https://backstage.jtec.xyz:443
      # config options: https://node-postgres.com/apis/client
      database:
        client: pg
        connection:
          host: ${POSTGRES_HOST}
          port: ${POSTGRES_PORT}
          user: ${POSTGRES_USER}
          password: ${POSTGRES_PASSWORD}
          # https://node-postgres.com/features/ssl
          # you can set the sslmode configuration option via the `PGSSLMODE` environment variable
          # see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
          # ssl:
          #   ca: # if you have a CA file and want to verify it you can uncomment this section
          #     $file: <file-path>/ca/server.crt
    catalog:
      # Overrides the default list locations from app-config.yaml as these contain example data.
      # See https://backstage.io/docs/features/software-catalog/#adding-components-to-the-catalog for more details
      # on how to get entities into the catalog.
      locations:
        # Local example data, replace this with your production config, these are intended for demo use only.
        # File locations are relative to the backend process, typically in a deployed context, such as in a Docker container, this will be the root

        # Local example organizational data
        - type: file
          target: ./examples/org.yaml
          rules:
            - allow: [User, Group]
  app-config.yaml: |-
    app:
      title: A place for all your things
      baseUrl: http://localhost:3000
    organization:
      name: JTEC
    backend:
      # Used for enabling authentication, secret is shared by all backend plugins
      # See https://backstage.io/docs/auth/service-to-service-auth for
      # information on the format
      # auth:
      #   keys:
      #     - secret: ${BACKEND_SECRET}
      baseUrl: http://localhost:7007
      listen:
        port: 7007
        # Uncomment the following host directive to bind to specific interfaces
        # host: 127.0.0.1
      csp:
        connect-src: ["'self'", 'http:', 'https:']
        # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
        # Default Helmet Content-Security-Policy values can be removed by setting the key to false
      cors:
        origin: http://localhost:3000
        methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
        credentials: true
      reading:
        allow:
          - host: raw.githubusercontent.com
      # This is for local development only, it is not recommended to use this in production
      # The production database configuration is stored in app-config.production.yaml
      database:
        client: better-sqlite3
        connection: ':memory:'
      # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir
    integrations:
      github:
        - host: github.com
          # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
          # about setting up the GitHub integration here: https://backstage.io/docs/integrations/github/locations#configuration
          token: ${GITHUB_TOKEN}
          apiBaseUrl: https://api.github.com
    proxy:
    ### Example for how to add a proxy endpoint for the frontend.
    ### A typical reason to do this is to handle HTTPS and CORS for internal services.
    # endpoints:
    #   '/test':
    #     target: 'https://example.com'
    #     changeOrigin: true

    # Reference documentation http://backstage.io/docs/features/techdocs/configuration
    # Note: After experimenting with basic setup, use CI/CD to generate docs
    # and an external cloud storage when deploying TechDocs for production use-case.
    # https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
    techdocs:
      builder: 'local' # Alternatives - 'external'
      generator:
        runIn: 'docker' # Alternatives - 'local'
      publisher:
        type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.
    auth:
      # see https://backstage.io/docs/auth/ to learn about auth providers
      environment: development
      providers:
        guest: {}
        microsoft:
          development:
            clientId: ${AZURE_CLIENT_ID}
            clientSecret: ${AZURE_CLIENT_SECRET}
            tenantId: ${AZURE_TENANT_ID}
            domainHint: ${AZURE_TENANT_ID}
            signIn:
              resolvers:
                # See https://backstage.io/docs/auth/microsoft/provider#resolvers for more resolvers
                - resolver: userIdMatchingUserEntityAnnotation
        github:
          development:
            clientId: ${AUTH_GITHUB_CLIENT_ID}
            clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
            signIn:
              resolvers:
                # See https://backstage.io/docs/auth/github/provider#resolvers for more resolvers
                - resolver: emailMatchingUserEntityProfileEmail
                - resolver: emailLocalPartMatchingUserEntityName
                - resolver: usernameMatchingUserEntityName
    scaffolder:
    # see https://backstage.io/docs/features/software-templates/configuration for software template options
    catalog:
      import:
        entityFilename: catalog-info.yaml
        pullRequestBranchName: backstage-integration
      rules:
        - allow: [Component, System, API, Resource, Location, Template]
      locations:
        # Local example data, file locations are relative to the backend process, typically `packages/backend`
        - type: file
          target: ../../examples/entities.yaml
        # Local example template
        - type: file
          target: ../../examples/template/template.yaml
          rules:
            - allow: [Template]
        - type: file
          target: ../../scaffolds/argocd-application/template.yaml
          rules:
            - allow: [Template]
        # Local example organizational data
        - type: file
          target: ../../examples/org.yaml
          rules:
            - allow: [User, Group]
      providers:
        github:
          backstageEntities:
            organization: 'jDmacD'
            catalogPath: '/**/*.yaml'
            filters:
              branch: 'main'
              repository: 'backstage-entities'
          catalogueEntities:
            organization: 'jDmacD'
            catalogPath: '/**/catalog-info.yaml'
            filters:
              branch: 'main'
              repository: 'catalogue'
        microsoftGraphOrg:
          default:
            tenantId: ${AZURE_TENANT_ID}
            # user:
            #   filter: accountEnabled eq true and userType eq 'member'
            # group:
            #   filter: >
            #     securityEnabled eq false
            #     and groupTypes/any(c:c eq 'Unified')
            schedule:
              frequency: PT1H
              timeout: PT50M
    kubernetes:
      # see https://backstage.io/docs/features/kubernetes/configuration for kubernetes configuration options
      serviceLocatorMethod:
        type: multiTenant
      clusterLocatorMethods:
        - type: config
          clusters:
            - url: https://tpi01.lan:6443
              name: turing # You can use any name you want
              authProvider: serviceAccount
              skipTLSVerify: true
              skipMetricsLookup: false
              serviceAccountToken: ${KUBERNETES_TOKEN}
              dashboardApp: headlamp
              dashboardParameters:
                internal: true
                headlampRoute: /headlamp
      customResources:
        - group: 'argoproj.io'
          apiVersion: 'v1alpha1'
          plural: 'applications'
        - group: 'argoproj.io'
          apiVersion: 'v1alpha1'
          plural: 'applicationsets'
        - group: 'gateway.networking.k8s.io'
          apiVersion: 'v1'
          plural: 'gateways'
        - group: 'gateway.networking.k8s.io'
          apiVersion: 'v1'
          plural: 'httproutes'
        - group: 'postgresql.cnpg.io'
          apiVersion: 'v1'
          plural: 'clusters'
        - group: 'postgresql.cnpg.io'
          apiVersion: 'v1'
          plural: 'databases'
    # see https://backstage.io/docs/permissions/getting-started for more on the permission framework
    permission:
      # setting this to `false` will disable permissions
      enabled: true
    argocd:
      username: ${ARGOCD_USERNAME}
      password: ${ARGOCD_PASSWORD}
      appLocatorMethods:
        - type: 'config'
          instances:
            - name: control
              url: https://argocd.jtec.xyz
              token: ${ARGOCD_AUTH_TOKEN}
    kubernetesIngestor:
      # Resource mapping configuration
      mappings:
        namespaceModel: 'default' # cluster, namespace, default
        nameModel: 'name-kind' # name-cluster, name-namespace, name-kind, name
        titleModel: 'name' # name, name-cluster, name-namespace
        systemModel: 'default' # cluster, namespace, cluster-namespace, default
        referencesNamespaceModel: 'default'
      # Component ingestion settings
      components:
        enabled: true
        taskRunner:
          frequency: 10
          timeout: 600
        excludedNamespaces:
          - kube-public
          - kube-system
        disableDefaultWorkloadTypes: true
        customWorkloadTypes:
          - group: 'argoproj.io'
            apiVersion: 'v1alpha1'
            plural: 'applications'
        # - group: 'argoproj.io'
        #   apiVersion: 'v1alpha1'
        #   plural: 'applicationsets'
        # - group: 'gateway.networking.k8s.io'
        #   apiVersion: 'v1'
        #   plural: 'gateways'
        # - group: 'gateway.networking.k8s.io'
        #   apiVersion: 'v1'
        #   plural: 'httproutes'
        # - group: 'postgresql.cnpg.io'
        #   apiVersion: 'v1'
        #   plural: 'clusters'
        # - group: 'postgresql.cnpg.io'
        #   apiVersion: 'v1'
        #   plural: 'databases'
      # Crossplane integration
      crossplane:
        enabled: false
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: backstage
